1. Requirments.
    - Haskell Platform ..
    - Terminal with utf8 support.
    - Terminal font for corresponding utf8 characters.

    - File with words must be in utf8 and terminal must support utf8 output.

2.1 Build.

    Run following commands in the project's root folder:

        $ cabal configure
        $ cabal build
        $ cabal copy --destdir=tmp

    On Unix system resulting binary file will be in

        tmp/$HOME/.cabal/bin/

    on Windows Vista or 7 system resulting binary file will be in
    (%UserProfile% without C:)

	tmp\Users\sgf\AppData\Roaming\cabal\bin

    on Windows Xp or earlier system resulting binary will be in
    (%UserProfile% without C:)

        tmp\Documents And Settings\user\Application Data\cabal\bin

2.2. Running on Windows with Japanese and Russian words file.

    Install ConEmu - terminal emulator - for two reasons:
        - cmd.exe supports only limited set of monospace fonts and in any way
          it's much easier to configure font through ConEmu.
        - cmd.exe does not support Input Method, but ConEmu does.

    Choose <..> Courier New font and uncheck "Monospace" font.

    Second, configure Input Method (not described here).
    Third, switch cmd.exe to utf8 mode using

        $ chcp 65001


3. Words file format.

File consist from logical..


4. Outdated words file format.

Usage: ./show_words [options..] [column_names]

  Show words (phrases) from file one by one in specified column order and
check your answers against next word.

Options:
 -m, --mode MODE - set operation mode to MODE.
 -f, --file FILE - read words from file.
 -s              - shuffle input lines.
 where
     MODE - operation mode:
         - "print" for waiting for a key after each next phrase in
           specified columns.
         - "check" for checking user input against each next phrase in
           specified columns (literal check).
         - "reorder" just reorder columns and output all file at once. This
           is default.
     FILE - input file with words (words.txt is by default).
     [column_names] - any number of any column names, one in one command
                      line argument.

  File must contain lines of words. Line may contain several columns
separated by columnSep. Column may contain several phrases separated by
phraseSep.  First line of file treated as heading (reference), and should
contain column names in current order separated by referenceSep. These
separators defined in main.

  File will be displayed line by line, phrase by phrase in the specified
columns order with leading and trailing spaces of each phrase deleted
(inner spaces preserved). You may specify desired column order at command
line: any column names in any order.

  If there is at least two valid column names specified, first is treated
as "question". Before every phrase in other (not first) specified columns
requested action (wait or check) will be executed. All other
(non-specified) columns will be outputted at once right after last
specified column. No action will be executed before them or phrases in
them, and execution immediately proceeds at the next line.
  Hence, if there is less, than two columns specified, entire file will be
outputted at once, so this has a little sense :-)

  Incorrect column names silently skipped without any notification.  This
may lead to nasty bugs, when all seems ok, but not works however. So,
double check column names in words file and on command line!

